<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: swift | RainySummer's New Blog]]></title>
  <link href="http://blog.xd547.com/blog/categories/swift/atom.xml" rel="self"/>
  <link href="http://blog.xd547.com/"/>
  <updated>2014-10-18T21:31:04+08:00</updated>
  <id>http://blog.xd547.com/</id>
  <author>
    <name><![CDATA[RainySummer]]></name>
    <email><![CDATA[RainySummer@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Swift学习笔记-2-函数和闭包]]></title>
    <link href="http://blog.xd547.com/blog/2014/06/10/swift-learning-notes-2-functions-closures/"/>
    <updated>2014-06-10T21:10:00+08:00</updated>
    <id>http://blog.xd547.com/blog/2014/06/10/swift-learning-notes-2-functions-closures</id>
    <content type="html"><![CDATA[<p>使用<code>func</code>定义函数，通过函数名和参数列表来调用函数，
使用<code>-&gt;</code>分割参数列表和返回类型
```
func greet(name: String, day: String) -> String {</p>

<pre><code>return "Hello \(name), today is \(day)"
</code></pre>

<p>}
greet("Bob", "Tuesday")
<code>
使用元组（tuple）返回多个值
</code>
func getGasPrices -> (Double, Double, Double) {</p>

<pre><code>return (3.59, 3.69, 3.79)
</code></pre>

<p>}
// 还不知道如何获得返回值，会补上
getGasPrices()
<code>
函数的变长参数会保存在指定名字的数组中
</code>
func sumOf(numbers:Int...) -> Int {</p>

<pre><code>var sum = 0
for number in numbers {
    sum += number
}

return sum
</code></pre>

<p>}
sumOf()            // 0
sumOf(42, 597, 12) // 651
<code>
可以使用嵌套函数，嵌套的函数可以访问它所嵌入函数中所的声明的变量。
函数太长或是太复杂的情况下可以使用嵌套函数来组织代码。
</code>
func returnFifteen() -> Int {</p>

<pre><code>var y = 0
func add() {
    y += 5
}
add()

return y
</code></pre>

<p>}
returnFifteen() // 5
<code>
函数是一等类型，这意味着可以把函数当做另一个函数的返回值
</code>
// 返回类型的解释是：返回 一个接受整形参数返回整形的函数
func makeIncrementer() -> (Int -> Int) {</p>

<pre><code>func addOne(number:Int) -&gt;Int {
    return 1 + number
}

return addOne
</code></pre>

<p>}
var increment = makeIncrementer()
increment(7) // 8
<code>
也意味着函数可以作为另一个函数的参数
</code>
func hasAnyMathces(list:Int[], condition:Int -> Bool) -> Bool {</p>

<pre><code>for item in list {
    if condition(item) {
        return true
    }
}
return false
</code></pre>

<p>}</p>

<p>func lessThanTen(number:Int) -> Bool {</p>

<pre><code>return number &lt; 10
</code></pre>

<p>}
var numbers = [20, 19, 7, 12]
hasAnyMathces(numbers, lessThanTen) // true
<code>
函数是闭包的特例，闭包没有名字，使用花括号（`{}`）包围，
使用`in`来分割参数列表返回类型与主体
</code>
...
numbers.map({</p>

<pre><code>(number:Int) -&gt; Int in
let result = 3 * number
return result
})
</code></pre>

<p>// [60, 57, 21, 36]
<code>
有几个方法可以简化闭包，当闭包的类型是已知时
（如：委托（delegate）的回调（callback）），可以省略参数的类型，
返回类型，返回语句。而返回值隐含的包含在闭包唯一的语句之中
</code>
// [60, 57, 21, 36]
numbers.map({ number in 3 * number })
<code>
使用参数的序号代替参数名，即可写出超短的闭包，
闭包可以作为函数的最后一个参数
</code>
sort([1, 5, 3, 12, 2]) { $0 > $1 } // [12, 5, 3, 2, 1]
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift学习笔记-1-流程控制 ]]></title>
    <link href="http://blog.xd547.com/blog/2014/06/05/swift-learning-notes-1-control-flow/"/>
    <updated>2014-06-05T09:14:00+08:00</updated>
    <id>http://blog.xd547.com/blog/2014/06/05/swift-learning-notes-1-control-flow</id>
    <content type="html"><![CDATA[<p>条件语句使用<code>if</code>，<code>switch</code>，循环使用<code>for-in</code>，<code>for</code>，<code>while</code>和<code>do-while</code>，
条件变量和循环变量的圆括号可选，条件体和循环体必须有花括号。
```
let individualScores = [75, 43, 103, 87, 12]</p>

<p>var teamScore = 0</p>

<p>for score in individualScores {</p>

<pre><code>if score &gt; 50 {
    teamScore += 3
} else {
    teamScore += 1
}
</code></pre>

<p>}
teamScore // 11
```</p>

<p><code>if</code>语句中，条件必须是布尔表达式，也就是说<code>if socre { ... }</code>是错误的，
没有隐含的0比较.</p>

<p>一个变量可能没有值的时候，<code>if</code>和<code>let</code>可以一起使用，这些值通过
可选值（optional value）表示。一个可选值要么包含一个值，要么是<code>nil</code>，
在类型后面加问号（?）就可以把一个值标记为可选值
```
var optionalString: String? = "Hello"
optionalString == nil</p>

<p>var optionalName: String? = "John Appleseed"
//var optionalName: String? = nil
var greeting = "Hello!"
if let name = optionalName {</p>

<pre><code>greeting = "Hello, \(name)"
</code></pre>

<p>} else {</p>

<pre><code>greeting = "Hello, world"
</code></pre>

<p>}
```</p>

<p>可选值为<code>nil</code>条件的结果是<code>false</code>，用<code>let</code>声明的<code>name</code>的作用域
仅在<code>if-else</code>结构中</p>

<p><code>switch</code>可以使用任何种类的比较数据，而不只是整型数值和相等的比较
```
let vegetable = "red pepper"
switch vegetable {
case "celery":</p>

<pre><code>let vegetableComment = "Add some raisins and make ants on a log."
</code></pre>

<p>case "cucumber", "watercress":</p>

<pre><code>let vegetableComment = "That would make a good tea sandwich"
</code></pre>

<p>case let x where x.hasSuffix("pepper"):</p>

<pre><code>let vegetableComment = "Is it a spicy \(x)?"
</code></pre>

<p>default:</p>

<pre><code>let vegetableComment = "Everything tastes good in soup"
</code></pre>

<p>}
<code>``
代码执行时如果</code>switch case<code>匹配，</code>switch<code>就会退出，不会执行后面的</code>case<code>，
所以不必要在每个</code>case<code>结束之后加入</code>break<code>
要注意的是在</code>switch<code>必须要有一个</code>default`，否则会报错</p>

<p>使用键值对在<code>for-in</code>遍历字典
```
let interestingNumbers = [</p>

<pre><code>"Prime": [2, 3, 5, 7, 11, 13],
"Fibonacci": [1, 1, 2, 3, 5, 8],
"Square": [1, 4, 9, 16, 25],
</code></pre>

<p>]</p>

<p>var largest = 0;
var largestKind = "";
for (kind, numbers) in interestingNumbers {</p>

<pre><code>for number in numbers {
    if number &gt; largest {
        largest = number
        largestKind = kind
    }
}
</code></pre>

<p>}
largest      // 25
largestKind  // Square
```</p>

<p>用<code>while</code>来执行一段代码直到条件改变，条件可以放在循环的最后（<code>do-while</code>），
来保证循环至少执行一次
```
var n = 2
while n &lt; 100 {</p>

<pre><code>n = n * 2
</code></pre>

<p>}</p>

<p>n // 128</p>

<p>var m = 2</p>

<p>do {</p>

<pre><code>m = m * 2
</code></pre>

<p>} while m &lt; 100
m // 128
```</p>

<p>在循环中使用range<code>..</code>或是初始化，条件，增量的形式来获得索引
```
var firstForLoop = 0
for i in 0..3 {</p>

<pre><code>firstForLoop += i
</code></pre>

<p>}</p>

<p>firstForLoop // 3</p>

<p>var secondForLoop = 0
for var i = 0; i &lt; 3; ++i {</p>

<pre><code>secondForLoop += 1
</code></pre>

<p>}
secondForLoop // 3
<code>``
</code>..<code>排除最后一个值
</code>...`包含最后一个值</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift学习笔记-0]]></title>
    <link href="http://blog.xd547.com/blog/2014/06/03/swift-learning-notes-0/"/>
    <updated>2014-06-03T09:39:00+08:00</updated>
    <id>http://blog.xd547.com/blog/2014/06/03/swift-learning-notes-0</id>
    <content type="html"><![CDATA[<p>Apple在昨天的WWDC上发布了新的语言Swift，非常值得一学，
主要用来做书<a href="https://itunes.apple.com/us/book/the-swift-programming-language/id881256329?mt=11">The Swift Programming Language</a>
（iBooks）的笔记和一些自己的想法。</p>

<p>Hello,world不用载入其他的库，不需要main函数，不需要分号结尾
<code>
println("Hello， world")
</code>
用<code>var</code>声明变量，用<code>let</code>声明常量,
编译器根据变量和常量的赋值推断其类型
<code>
var myVariable = 42
myVariable = 50
let myConstant = 42
</code>
也可以显式的指定类型
<code>
let explicitDouble: Double = 70
</code>
不能隐式改变类型，要显式改变
<code>
let label = "The width is"
let width = 94
let widthLabel = label + String(width)
</code>
<code>\()</code>内嵌字符串
<code>
let apples = 3
let oranges= 5
let appleSummary = "I have \(apples) apples."
let fruitSummary = "I have \(apples + oranges) pieces of fruit."
</code>
下面这点让我开始喜欢Swift，数组（array）和字典（dictionary）
统一使用<code>[]</code>创建
```
var shoppingList = ["catfish", "water", "tulips", "blue paint"]
shoppingList[1] = "bottle of water" // 这点可以看出Swift也是从0开始</p>

<p>var occupations = [</p>

<pre><code>"Malcolm": "Captain",
"Kaylee": "Mechanic",
</code></pre>

<p>]
occupations["Jayne"] = "Public Relations"
<code>
使用initializer syntax创建空数组和字典
</code>
let emptyArray = String<a href=""></a> // 新版该句会出错，见下面
let emptyArray = <a href="">String</a> // 新语法
let emptyDictionary = Dictionary&lt;String, Float>()
// 说明Swift是强类型的，不像脚本语言可以装任意对象在数组和字典里面
// 字典的key只能使用 String，而不是任何对象
<code>
如果类型可以确定，使用`[]`创建并重新赋值数组，使用`[:]`创建并重新赋值字典。
</code>
shoppingList = [] // 已经去购物了，而且东西都买到了，也就是shopping置空
```</p>
]]></content>
  </entry>
  
</feed>
