<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: swift | RainySummer's New Blog]]></title>
  <link href="http://blog.xd547.com/blog/categories/swift/atom.xml" rel="self"/>
  <link href="http://blog.xd547.com/"/>
  <updated>2014-06-04T12:16:41+08:00</updated>
  <id>http://blog.xd547.com/</id>
  <author>
    <name><![CDATA[RainySummer]]></name>
    <email><![CDATA[RainySummer@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Swift学习笔记-0]]></title>
    <link href="http://blog.xd547.com/blog/2014/06/03/swift-learning-notes-0/"/>
    <updated>2014-06-03T09:39:00+08:00</updated>
    <id>http://blog.xd547.com/blog/2014/06/03/swift-learning-notes-0</id>
    <content type="html"><![CDATA[<p>Apple在昨天的WWDC上发布了新的语言Swift，非常值得一学，
主要用来做书<a href="https://itunes.apple.com/us/book/the-swift-programming-language/id881256329?mt=11">The Swift Programming Language</a>
（iBooks）的笔记和一些自己的想法。</p>

<p>Hello,world不用载入其他的库，不需要main函数，不需要分号结尾
<code>
println("Hello， world")
</code>
用<code>var</code>声明变量，用<code>let</code>声明常量,
编译器根据变量和常量的赋值推断其类型
<code>
var myVariable = 42
myVariable = 50
let myConstant = 42
</code>
也可以显式的指定类型
<code>
let explicitDouble: Double = 70
</code>
不能隐式改变类型，要显式改变
<code>
let label = "The width is"
let width = 94
let widthLabel = label + String(width)
</code>
<code>\()</code>内嵌字符串
<code>
let apples = 3
let oranges= 5
let appleSummary = "I have \(apples) apples."
let fruitSummary = "I have \(apples + oranges) pieces of fruit."
</code>
下面这点让我开始喜欢Swift，数组（array）和字典（dictionary）
统一使用<code>[]</code>创建
```
var shoppingList = ["catfish", "water", "tulips", "blue paint"]
shoppingList[1] = "bottle of water" // 这点可以看出Swift也是从0开始</p>

<p>var occupations = [</p>

<pre><code>"Malcolm": "Captain",
"Kaylee": "Mechanic",
</code></pre>

<p>]
occupations["Jayne"] = "Public Relations"
<code>
使用initializer syntax创建空数组和字典
</code>
let emptyArray = String<a href=""></a>
let emptyDictionary = Dictionary&lt;String, Float>()
// 说明Swift是强类型的，不像脚本语言可以装任意对象在数组和字典里面
// 字典的key只能使用 String，而不是任何对象
<code>
如果类型可以确定，使用`[]`创建并重新赋值数组，使用`[:]`创建并重新赋值字典。
</code>
shoppingList = [] // 已经去购物了，而且东西都买到了，也就是shopping置空
```</p>
]]></content>
  </entry>
  
</feed>
